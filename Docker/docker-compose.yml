version: '3.8'

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - monitoring
      
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    user: "472"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "4000:3000"
    restart: unless-stopped
    networks:
      - monitoring
    entrypoint: >
      sh -c "
        mkdir -p /etc/grafana/provisioning/datasources && \
        echo '
        apiVersion: 1
        datasources:
          - name: Prometheus
            type: prometheus
            access: proxy
            url: http://prometheus:9090
            isDefault: true
            editable: true
        ' > /etc/grafana/provisioning/datasources/datasource.yml && \
        /run.sh
      "

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - monitoring

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - kibana_data:/usr/share/kibana/data
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - monitoring

  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.2
    container_name: logstash
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5000:5000"
    depends_on:
      - elasticsearch
    networks:
      - monitoring

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - monitoring

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    networks:
      - monitoring

  kafka-init:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka-init
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "
      sleep 10 &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic confirmation_topic --replication-factor 1 --partitions 1 &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic notification_topic --replication-factor 1 --partitions 1 &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic deleted_users_user_to_main --replication-factor 1 --partitions 1 &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic deleted_users_main_to_user --replication-factor 1 --partitions 1 &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic project_update_notification_m2s --replication-factor 1 --partitions 1 &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic project_update_notification_s2n --replication-factor 1 --partitions 1 
      "
    networks:
      - monitoring

volumes:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  kibana_data:

networks:
  monitoring:
    driver: bridge
